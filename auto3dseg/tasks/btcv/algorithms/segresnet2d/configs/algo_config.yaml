# Generated automatically by `monai.apps.auto3dseg.bundle_gen`
# For more information please visit: https://docs.monai.io/

# source file: /workspace/Code/Bundles/Task09/algorithm_templates/segresnet2d/configs/hyper_parameters.yaml
# source file: /workspace/Code/Bundles/Task09/algorithm_templates/segresnet2d/configs/transforms_validate.yaml
# source file: /workspace/Code/Bundles/Task09/algorithm_templates/segresnet2d/configs/network.yaml
# source file: /workspace/Code/Bundles/Task09/algorithm_templates/segresnet2d/configs/transforms_infer.yaml
# source file: /workspace/Code/Bundles/Task09/algorithm_templates/segresnet2d/configs/transforms_train.yaml


_meta_: {}
amp: true
bundle_root: /RW/2022/auto3dseg/btcv_testrun/auto3dseg/monai/apps/auto3dseg/algo_teamplates/segresnet2d
ckpt_path: $@bundle_root + '/model_fold' + str(@fold)
data_file_base_dir: /RW/2022/auto3dseg/btcv_testrun/82142
data_list_file_path: /RW/2022/auto3dseg/btcv_testrun/datafolds/BTCV_folds.json
determ: false
finetune: {activate: false, pretrained_ckpt_name: $@bundle_root + '/model_fold' +
    str(@fold) + '/best_metric_model.pt'}
fold: 4
image_key: image
infer: {ckpt_name: $@bundle_root + '/model_fold' + str(@fold) + '/best_metric_model.pt',
  data_list_key: testing, fast: false, ouptut_path: $@bundle_root + '/prediction_'
    + @infer#data_list_key}
input_channels: 1
label_key: label
learning_rate: 0.025
loss: {_target_: DiceFocalLoss, batch: true, include_background: true, sigmoid: $not
    @softmax, smooth_dr: 1.0e-05, smooth_nr: 1.0e-05, softmax: $@softmax, squared_pred: true,
  to_onehot_y: $@softmax}
lr_scheduler: {_target_: torch.optim.lr_scheduler.StepLR, gamma: 0.5, optimizer: $@optimizer,
  step_size: $@num_iterations // 5}
network:
  _target_: SegResNet
  act:
  - RELU
  - {inplace: false}
  dropout_prob: 0.1
  in_channels: $@input_channels * (2 * @num_adjacent_slices + 1)
  init_filters: 32
  out_channels: '@output_classes'
  spatial_dims: 2
num_adjacent_slices: 1
num_images_per_batch: 2
num_iterations: 40000
num_iterations_per_validation: 500
num_patches_per_image: 1
num_sw_batch_size: 2
optimizer: {_target_: torch.optim.SGD, lr: '@learning_rate', momentum: 0.9, weight_decay: 4.0e-05}
output_classes: 14
overlap_ratio: 0.25
patch_size: [320, 320, $@num_adjacent_slices * 2 + 1]
patch_size_valid: [320, 320, $@num_adjacent_slices * 2 + 1]
softmax: true
transforms_infer:
  _target_: Compose
  transforms:
  - {_target_: LoadImaged, keys: '@image_key'}
  - {_target_: EnsureChannelFirstd, keys: '@image_key'}
  - {_target_: Orientationd, axcodes: RAS, keys: '@image_key'}
  - _target_: Spacingd
    align_corners: true
    keys: '@image_key'
    mode: bilinear
    pixdim: [1.5, 1.5, 2.0]
  - {_target_: CastToTyped, dtype: $torch.float32, keys: '@image_key'}
  - _target_: Compose
    transforms:
    - {_target_: ScaleIntensityRanged, a_max: 250.0, a_min: -175.0,
      b_max: 1.0, b_min: 0.0, clip: true, keys: '@image_key'}
    - _target_: CropForegroundd
      keys: ['@image_key', '@label_key']
      source_key: '@image_key'
  - {_target_: CastToTyped, dtype: $torch.float32, keys: '@image_key'}
transforms_train:
  _target_: Compose
  transforms:
  - _target_: LoadImaged
    keys: ['@image_key', '@label_key']
  - _target_: EnsureChannelFirstd
    keys: ['@image_key', '@label_key']
  - _target_: Orientationd
    axcodes: RAS
    keys: ['@image_key', '@label_key']
  - _target_: Spacingd
    align_corners: [true, true]
    keys: ['@image_key', '@label_key']
    mode: [bilinear, nearest]
    pixdim: [1.5, 1.5, 2.0]
  - {_target_: CastToTyped, dtype: $torch.float32, keys: '@image_key'}
  - _target_: Compose
    transforms:
    - {_target_: ScaleIntensityRanged, a_max: 250.0, a_min: -175.0,
      b_max: 1.0, b_min: 0.0, clip: true, keys: '@image_key'}
    - _target_: CropForegroundd
      keys: ['@image_key', '@label_key']
      source_key: '@image_key'
  - _target_: CastToTyped
    dtype: [$torch.float16, $torch.uint8]
    keys: ['@image_key', '@label_key']
  - _target_: EnsureTyped
    keys: ['@image_key', '@label_key']
  - {_target_: CastToTyped, dtype: $torch.float32, keys: '@image_key'}
  - _target_: SpatialPadd
    keys: ['@image_key', '@label_key']
    mode: [reflect, constant]
    spatial_size: '@patch_size'
  - _target_: RandCropByLabelClassesd
    keys: ['@image_key', '@label_key']
    label_key: '@label_key'
    num_classes: '@output_classes'
    num_samples: '@num_patches_per_image'
    spatial_size: '@patch_size'
  - _target_: RandRotated
    keys: ['@image_key', '@label_key']
    mode: [bilinear, nearest]
    prob: 0.2
    range_x: 0.3
    range_y: 0.3
    range_z: 0.0
  - _target_: RandZoomd
    keys: ['@image_key', '@label_key']
    max_zoom: [1.2, 1.2, 1.0]
    min_zoom: [0.8, 0.8, 1.0]
    mode: [trilinear, nearest]
    prob: 0.16
  - _target_: RandGaussianSmoothd
    keys: '@image_key'
    prob: 0.15
    sigma_x: [0.5, 1.15]
    sigma_y: [0.5, 1.15]
    sigma_z: [0.5, 1.15]
  - {_target_: RandScaleIntensityd, factors: 0.3, keys: '@image_key', prob: 0.5}
  - {_target_: RandShiftIntensityd, keys: '@image_key', offsets: 0.1, prob: 0.5}
  - {_target_: RandGaussianNoised, keys: '@image_key', prob: 0.15, std: 0.01}
  - _target_: RandFlipd
    keys: ['@image_key', '@label_key']
    prob: 0.5
    spatial_axis: 0
  - _target_: RandFlipd
    keys: ['@image_key', '@label_key']
    prob: 0.5
    spatial_axis: 1
  - _target_: CastToTyped
    dtype: [$torch.float32, $torch.uint8]
    keys: ['@image_key', '@label_key']
transforms_validate:
  _target_: Compose
  transforms:
  - _target_: LoadImaged
    keys: ['@image_key', '@label_key']
  - _target_: EnsureChannelFirstd
    keys: ['@image_key', '@label_key']
  - _target_: Orientationd
    axcodes: RAS
    keys: ['@image_key', '@label_key']
  - _target_: Spacingd
    align_corners: [true, true]
    keys: ['@image_key', '@label_key']
    mode: [bilinear, nearest]
    pixdim: [1.5, 1.5, 2.0]
  - {_target_: CastToTyped, dtype: $torch.float32, keys: '@image_key'}
  - _target_: Compose
    transforms:
    - {_target_: ScaleIntensityRanged, a_max: 250.0, a_min: -175.0,
      b_max: 1.0, b_min: 0.0, clip: true, keys: '@image_key'}
    - _target_: CropForegroundd
      keys: ['@image_key', '@label_key']
      source_key: '@image_key'
  - _target_: CastToTyped
    dtype: [$torch.float32, $torch.uint8]
    keys: ['@image_key', '@label_key']
validate: {ckpt_name: $@bundle_root + '/model_fold' + str(@fold) + '/best_metric_model.pt',
  ouptut_path: $@bundle_root + '/prediction_fold' + str(@fold), save_mask: true}
