# Generated automatically by `monai.apps.auto3dseg.bundle_gen`
# For more information please visit: https://docs.monai.io/

# source file: ./workdir/algorithm_templates/dints/configs/network.yaml
# source file: ./workdir/algorithm_templates/dints/configs/transforms_validate.yaml
# source file: ./workdir/algorithm_templates/dints/configs/transforms_infer.yaml
# source file: ./workdir/algorithm_templates/dints/configs/network_search.yaml
# source file: ./workdir/algorithm_templates/dints/configs/hyper_parameters.yaml
# source file: ./workdir/algorithm_templates/dints/configs/transforms_train.yaml
# source file: ./workdir/algorithm_templates/dints/configs/hyper_parameters_search.yaml


_meta_: {}
amp: true
arch_ckpt: $torch.load(@arch_ckpt_path, map_location=torch.device('cuda'))
arch_ckpt_path: $@bundle_root + '/scripts/arch_code.pth'
arch_optimizer_a:
  _target_: torch.optim.Adam
  betas: [0.5, 0.999]
  lr: '@learning_rate_arch'
  weight_decay: 0
arch_optimizer_c:
  _target_: torch.optim.Adam
  betas: [0.5, 0.999]
  lr: '@learning_rate_arch'
  weight_decay: 0
arch_path: $@bundle_root + '/arch_ram' + str(@ram_cost_factor) + '_fold' + str(@fold)
bundle_root: ./workdir/dints_3
ckpt_path: $@bundle_root + '/model_fold' + str(@fold)
data_file_base_dir: /workspace/data/msd/Task05_Prostate
data_list_file_path: /workspace/MONAI/auto3dseg/Task05_Prostate_v2_20220908/msd_task05_prostate_folds.json
determ: false
dints_space: {_target_: TopologySearch, channel_mul: 0.5, device: $torch.device('cuda'),
  num_blocks: 12, num_depths: 4, use_downsample: true}
finetune: {activate: false, pretrained_ckpt_name: $@bundle_root + '/model_fold' +
    str(@fold) + '/best_metric_model.pt'}
fold: 3
image_key: image
infer: {ckpt_name: $@bundle_root + '/model_fold' + str(@fold) + '/best_metric_model.pt',
  data_list_key: testing, fast: false, ouptut_path: $@bundle_root + '/prediction_'
    + @infer#data_list_key}
input_channels: 2
label_key: label
learning_rate: 0.025
learning_rate_arch: 0.001
loss: {_target_: DiceFocalLoss, batch: true, include_background: true, sigmoid: $not
    @softmax, smooth_dr: 1.0e-05, smooth_nr: 1.0e-05, softmax: $@softmax, squared_pred: true,
  to_onehot_y: $@softmax}
lr_scheduler: {_target_: torch.optim.lr_scheduler.StepLR, gamma: 0.5, step_size: $int(float(@num_iterations
    - @num_warmup_iterations) * 0.4)}
num_images_per_batch: 2
num_iterations: 20000
num_iterations_per_validation: 500
num_patches_per_image: 1
num_sw_batch_size: 2
num_warmup_iterations: 10000
optimizer: {_target_: torch.optim.SGD, lr: '@learning_rate', momentum: 0.9, weight_decay: 4.0e-05}
output_classes: 3
overlap_ratio: 0.625
patch_size: [128, 128, 32]
patch_size_valid: [128, 128, 32]
ram_cost_factor: 0.8
softmax: true
validate: {ckpt_name: $@bundle_root + '/model_fold' + str(@fold) + '/best_metric_model.pt',
  ouptut_path: $@bundle_root + '/prediction_fold' + str(@fold), save_mask: true}
