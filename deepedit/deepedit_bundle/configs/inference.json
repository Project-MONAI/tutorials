{
    "imports": [
        "$import glob",
        "$import os",
        "$import ignite"
    ],
    "bundle_root": "/workspace/tutorials/deepedit/deepedit_bundle",
    "output_dir": "$@bundle_root + '/eval'",
    "dataset_dir": "/workspace/Datasets/MSD_datasets/Task09_Spleen",
    "datalist": "$list(sorted(glob.glob(@dataset_dir + '/imagesTs/*.nii.gz')))",
    "label_names": {"spleen": 1, "background": 0},
    "spatial_size": [128, 128, 128],
    "number_intensity_ch": 1,
    "device": "$torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
    "network_def": {
        "_target_": "DynUNet",
        "spatial_dims": 3,
        "in_channels": "$len(@label_names) + @number_intensity_ch",
        "out_channels": "$len(@label_names)",
        "kernel_size": [3, 3, 3, 3, 3, 3],
        "strides": [1, 2, 2, 2, 2, [2, 2, 1]],
        "upsample_kernel_size": [2, 2, 2, 2, [2, 2, 1]],
        "norm_name": "instance",
        "deep_supervision": false,
        "res_block": true
    },
    "network": "$@network_def.to(@device)",
    "pre_transforms": {
        "_target_": "Compose",
        "transforms": [
              {
                  "_target_": "LoadImaged",
                  "keys": "image",
                  "reader": "ITKReader"
              },
              {
                  "_target_": "EnsureChannelFirstd",
                  "keys": "image"
              },
              {
                  "_target_": "Orientationd",
                  "keys": "image",
                  "axcodes": "RAS"
              },
              {
                  "_target_": "ScaleIntensityRanged",
                  "keys": "image",
                  "a_min":-175,
                  "a_max": 250,
                  "b_min": 0.0,
                  "b_max": 1.0,
                  "clip": true
              },
              {
                  "_target_": "Resized",
                  "keys":  "image",
                  "spatial_size": "@spatial_size",
                  "mode": "area"
              },
              {
                  "_target_": "DiscardAddGuidanced",
                  "keys": "image",
                  "label_names": "@label_names",
                  "number_intensity_ch": "@number_intensity_ch"
              },
              {
                  "_target_": "EnsureTyped",
                  "keys": "image"
              }
        ]
    },
    "dataset": {
        "_target_": "Dataset",
        "data": "$[{'image': i} for i in @datalist]",
        "transform": "@pre_transforms"
    },
    "dataloader": {
        "_target_": "DataLoader",
        "dataset": "@dataset",
        "batch_size": 1,
        "shuffle": false,
        "num_workers": 2
    },
    "inferer": {
        "_target_": "SimpleInferer"
    },
    "post_transforms": {
        "_target_": "Compose",
        "transforms": [
            {
                "_target_": "EnsureTyped",
                "keys": "pred"
            },
            {
                "_target_": "Activationsd",
                "keys": "pred",
                "softmax": true
            },
            {
                "_target_": "Invertd",
                "keys": "pred",
                "transform": "@pre_transforms",
                "orig_keys": "image",
                "meta_key_postfix": "meta_dict",
                "nearest_interp": false,
                "to_tensor": true
            },
            {
                "_target_": "AsDiscreted",
                "keys": "pred",
                "argmax": true
            },
            {
                "_target_": "SaveImaged",
                "keys": "pred",
                "meta_keys": "pred_meta_dict",
                "output_dir": "@output_dir"
            }
        ]
    },
    "handlers": [
        {
            "_target_": "CheckpointLoader",
            "load_path": "$@bundle_root + '/models/model.pt'",
            "load_dict": {"model": "@network"}
        },
        {
            "_target_": "StatsHandler",
            "iteration_log": false
        }
    ],
    "evaluator": {
        "_target_": "SupervisedEvaluator",
        "device": "@device",
        "val_data_loader": "@dataloader",
        "network": "@network",
        "inferer": "@inferer",
        "postprocessing": "@post_transforms",
        "val_handlers": "@handlers",
        "amp": true
    },
    "evaluating": [
        "$setattr(torch.backends.cudnn, 'benchmark', True)",
        "$@evaluator.run()"
    ]
}
